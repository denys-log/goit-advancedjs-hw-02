{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst button = document.querySelector('[data-start]');\nconst input = document.getElementById('datetime-picker');\nconst timerElements = ['days', 'hours', 'minutes', 'seconds'];\nlet userSelectedDate;\n\nflatpickr('#datetime-picker', {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (new Date() > selectedDates[0]) {\n      iziToast.error({\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n      });\n    } else {\n      userSelectedDate = selectedDates[0];\n      button.disabled = false;\n    }\n  },\n});\n\nbutton.addEventListener('click', () => {\n  button.disabled = true;\n  input.disabled = true;\n\n  const userSelectedDateTimestamp = new Date(userSelectedDate).getTime();\n  let countdownInterval;\n\n  function updateTimer() {\n    const diff = convertMs(userSelectedDateTimestamp - new Date().getTime());\n    if (diff.days < 0) {\n      clearInterval(countdownInterval);\n      input.disabled = false;\n    } else {\n      timerElements.forEach(element => {\n        document.querySelector(`[data-${element}]`).textContent =\n          addLeadingZero(diff[element]);\n      });\n    }\n  }\n\n  updateTimer();\n  countdownInterval = setInterval(updateTimer, 1000);\n});\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return value.toString().padStart(2, '0');\n}\n"],"names":["button","input","timerElements","userSelectedDate","flatpickr","selectedDates","iziToast","userSelectedDateTimestamp","countdownInterval","updateTimer","diff","convertMs","element","addLeadingZero","ms","days","hours","minutes","seconds","value"],"mappings":"2GAKA,MAAMA,EAAS,SAAS,cAAc,cAAc,EAC9CC,EAAQ,SAAS,eAAe,iBAAiB,EACjDC,EAAgB,CAAC,OAAQ,QAAS,UAAW,SAAS,EAC5D,IAAIC,EAEJC,EAAU,mBAAoB,CAC5B,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACjB,IAAI,KAASA,EAAc,CAAC,EAC9BC,EAAS,MAAM,CACb,QAAS,qCACT,SAAU,UAClB,CAAO,GAEDH,EAAmBE,EAAc,CAAC,EAClCL,EAAO,SAAW,GAErB,CACH,CAAC,EAEDA,EAAO,iBAAiB,QAAS,IAAM,CACrCA,EAAO,SAAW,GAClBC,EAAM,SAAW,GAEjB,MAAMM,EAA4B,IAAI,KAAKJ,CAAgB,EAAE,QAAO,EACpE,IAAIK,EAEJ,SAASC,GAAc,CACrB,MAAMC,EAAOC,EAAUJ,EAA4B,IAAI,KAAM,EAAC,QAAO,CAAE,EACnEG,EAAK,KAAO,GACd,cAAcF,CAAiB,EAC/BP,EAAM,SAAW,IAEjBC,EAAc,QAAQU,GAAW,CAC/B,SAAS,cAAc,SAASA,CAAO,GAAG,EAAE,YAC1CC,EAAeH,EAAKE,CAAO,CAAC,CACtC,CAAO,CAEJ,CAEDH,IACAD,EAAoB,YAAYC,EAAa,GAAI,CACnD,CAAC,EAED,SAASE,EAAUG,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASL,EAAeM,EAAO,CAC7B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACzC"}